#!/bin/python

import os
import re
import hashlib
import string
import argparse
import subprocess

## Defaults and constants
QUESTION_BLOCK = """NewQuestion,MC,
Title,Question {qnum}
QuestionText,<img width="100%" src="{url}>,HTML
Points,{points},
Difficulty,1,
"""
ANSWER_BLOCK = """Option,{truth},"Answer {letter}.",HTML,"no feedback"
"""
DEFAULT_BASE_URL = "https://michael.cadilhac.name/private/quiz/"
DEFAULT_PICS_DIR = "pics/"
DEFAULT_LATEXMK = "latexmk -quiet"
DEFAULT_BUILD_DIR = "_build/"


## From https://stackoverflow.com/questions/3431825/generating-an-md5-checksum-of-a-file
def md5file (fname):
    hash_md5 = hashlib.md5()
    try:
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
    except IOError as x:
        print ("error: cannot compute md5 of " + fname)
        exit (2)
    return hash_md5.hexdigest()

def prepquestion (question, args):
    qnum, points, correct, nchoices = re.findall ('\d+', question)
    jobname = os.path.splitext (os.path.basename (args.infile.name))[0] + "-" + qnum
    pretex = r'\def\qnum{' + str (qnum) + '}'
    cmd = args.latexmk + [ '-jobname=' + jobname, '-pretex=' + pretex,
                           '-usepretex', '-outdir=' + args.builddir,
                           args.infile.name ]
    if subprocess.call (cmd) != 0:
        print ("error: compilation error while running\n\t" + cmd)
        exit (2)

    pdf = args.builddir + "/" + jobname + ".pdf"
    md5dotpng = md5file (pdf) + ".png"
    png = args.picsdir + "/" + md5dotpng
    if not os.access (png, os.R_OK) or (os.path.getctime (pdf) > os.path.getctime (png)):
        cmd = ['convert', '-density', '200', pdf, '-colorspace', 'RGB', png]
        if subprocess.call (cmd) != 0:
            print ("error: conversion error while running\n\t" + cmd)
            exit (3)

    args.outfile.write (QUESTION_BLOCK.format (qnum = qnum,
                                               url = args.baseurl + "/" + md5dotpng,
                                               points = points))

    for choice in range (int (nchoices)):
        if int (correct) - 1 == choice:
            truth = 100
        else:
            truth = 0
        args.outfile.write (ANSWER_BLOCK.format (truth = truth, letter = string.ascii_uppercase[choice]))
    
def tex2quiz (args):
    correct = args.infile.readlines()[-1]
    nq = 0
    for question in re.findall ('\d+@\d+: \d+/\d+', correct):
        nq += 1
        print ("Preparing question " + str (nq))
        if (nq != int (re.findall ('\d+', question)[0])):
            print ("warning: questions do not appear in order in the footer")
            print ("         this should not happen if the mc-xml2tex is used, so")
            print ("         let's hope you know what you are doing")
        prepquestion (question, args)

    if nq == 0:
        print ("error: no question found in footer; was the input TeX file prepared by mc-xml2tex?")
        exit (1)

def main():
    parser = argparse.ArgumentParser(
        description='Transform a TeX file to a D2L quiz, creating PNG for each question.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('infile', metavar='QUIZ.tex', type=argparse.FileType('r'),
                        help='input file, as generated by mc-xml2tex')
    parser.add_argument('outfile', metavar='QUIZ.csv', type=argparse.FileType('w'),
                        help='output file for D2L')
    parser.add_argument ('-b', '--base-url', type=str, dest='baseurl', default=DEFAULT_BASE_URL,
                         help='The base URL where PNG files will be stored.')
    parser.add_argument ('-p', '--pics-dir', type=str, dest='picsdir', default=DEFAULT_PICS_DIR,
                         help='The directory in which PNGs go.')
    parser.add_argument ('-l', '--latexmk', type=str, dest='latexmk', default=DEFAULT_LATEXMK,
                         help='latexmk command to use.')
    parser.add_argument ('-B', '--build-dir', type=str, dest='builddir', default=DEFAULT_BUILD_DIR,
                         help='The directory in which PDFs and aux files go before being converted to PNGs.')
    args = parser.parse_args ()
    args.latexmk = re.split ('\s+', args.latexmk)
    tex2quiz (args)
    
      
if __name__ == "__main__": 
    main() 
