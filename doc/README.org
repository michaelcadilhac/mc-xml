#+TITLE: =mc-xml=: Simple XML to TeX and to D2L multiple choice quiz tools.
#+EXPORT: org-org-export-to-org

This package provides two tools:
- =mc-xml2tex=: This takes as input an XML description of multiple-choice
  questions, and a TeX template, and lays out the questions within the
  template.  The script is in charge of randomizing the order of the questions
  and the answers, respecting constraints indicated in the XML file.  The TeX
  template should have a few lines of Python that receive a Question object, and
  prints it.

- =mc-tex2xml=: This reads metadata from the TeX file about the questions
  (correct answers & points), then compiles the TeX file with a parameter.  The
  TeX file is in charge of isolating the question indicated in the parameter and
  only print that question.  The script then converts this output to PNG, and
  produces a CSV file that describes the quiz (with questions sourced from the
  PNG); that CSV in turn can be used as is in D2L.

The first tool can be used as is, but the second requires the first.

* Usage

** XML Format

The format used for questions is best presented with an example:

#+INCLUDE: doc/questions.example.xml src xml

The nodes and attributes that are understood by the scripts are:
- ~<mc deltaq=N>~: This indicates how far a question can end up, compared to
  its position in the XML file.  If =N= is 0, then the order in the XML file is
  the order in the TeX file (and hence the quiz).  If a =deltaq= is provided to
  the script =ml-xml2tex=, then it has precedence.
- ~<question points=2 fixed fixedanswers>~: =fixed= means that the position of
  the question in the XML file is the position in the TeX output (hence the
  quiz).  =fixedanswers= means that the /answers/ to that question will appear
  in the order given in the XML file.  This is in particular useful when one
  answer is of the form "Both A. and B.", and you need to be sure what A and B
  are.
- ~<choice correct fixed>~: Exactly one choice should have the =correct= flag.
  The =fixed= flag means that this answer should not be moved; this is useful
  for answers that you want to appear last, for instance "None of the above".
- ~<flush/>~: This makes sure that all the questions before the tag are already
  printed.  This is useful when you have several topics in a quiz, and don't
  want to mix questions too much.  Also, if question =X= introduces a concept that
  is used in questions =Y= and =Z=, it is possible to ensure that this question
  appears before the others using:
  #+begin_src xml
    <mc>
      ...
      <flush/>
      <question fixed>X</question>
      <question>Y</question>
      <question>Z</question>
      ...
    </mc>
  #+end_src
  or
  #+begin_src xml
    <mc>
      ...
      <question>X</question>
      <flush/>
      <question>Y</question>
      <question>Z</question>
      ...
    </mc>
  #+end_src

The other attributes appearing in the example file (=onepar=, =hideanswers=)
must be interpreted by the template TeX file.

** TeX Template

Again, this is best presented with a minimal example.  This first template is a
minimal example for =mc-xml2tex=; we will see that if we plan to use
=mc-tex2quiz= afterward, the minimal template is slightly more complicated.

#+INCLUDE: templates/minimal.tex src tex

The script =mc-xml2tex= will:
1. Print everything up to =%!EXTRAPREAMBLE=,
2. Print the =preamble= node of the XML file (if any, see above),
3. Print everything up to =%!BEGIN_QUESTIONS=,
4. Use the Python snippet between =%!BEGIN_QUESTIONS= and =%!END_QUESTIONS=, to
   print questions,
5. Print the rest of the TeX file.

The Python snippet reads the object =question= and the list =answers= and prints
them.  These are [[https://lxml.de/tutorial.html#the-element-class][=Element=]] objects, that is, the corresponding XML node.  The
main properties of interest are =text=, the actual text of the node, and the
=get()= method to retrieve attributes (=Element= behaves like a list).  The
children of the nodes are accessed with, e.g., =find()=, although this is not
needed in normal use.

In the example above, the Python snippet in the TeX template implements special
behavior for the flag =onepar= and =hideanswers=.

Further, if you plan on using =mc-tex2xml=, then the TeX file produces MUST read
the variable =\qnum=, and only print that question (ideally with the
=preview= package).  Here is a minimal example for this:

#+INCLUDE: templates/minimal-for-tex2quiz.tex src tex

** XML to TeX

The usage is as follows:

#+begin_example
  usage: mc-xml2tex [-h] [-d DELTAQ] FILE.xml TEMPLATE.tex

  Transform an XML Question file to TeX, randomizing questions and answers.

  positional arguments:
    FILE.xml              input file
    TEMPLATE.tex          template file

  optional arguments:
    -h, --help            show this help message and exit
    -d DELTAQ, --deltaquestions DELTAQ
                          how far from its original position can a question end
                          up, overrides the deltaq in the XML file, if any
                          (default: 0, in place)
#+end_example

The main nonobvious argument here is =QRAND=.  This indicates how far a question
can end up from its original position in the XML file.  The default, 0, means
that questions end up where they are in the file.  This is the same as having
all questions flagged with =fixed=.  This overrides the same setting in the XML
file.

** TeX to D2L

The usage is as follows:

#+begin_example
  usage: mc-tex2quiz [-h] [-b BASE_URL] [-o PICS_DIR] [-l LATEXMK] [-B BUILD_DIR] MC.tex QUIZ.csv
    Compiles each question in MC.tex to a PNG file, and creates a CSV quiz
    file for D2L.  The PNG are output in the PICS_DIR directory.

  Options:
    -b BASE_URL: The base URL where PNG files will be stored.
                 (default: https://michael.cadilhac.name/private/quiz/)
    -o PICS_DIR: The directory in which PNGs go.
                 (default: pics/)
    -l LATEXMK: latexmk command to use.
                 (default: latexmk -quiet)
    -B BUILD_DIR: The directory in which PDFs and aux files go before being converted to PNGs.
                 (default: _build/)
    -h: Prints this help message.

  Notes:
    This program relies on latexmk.  The file MC.tex MUST use the variable \qnum.
#+end_example

This will compile each question separately, using =latexmk=.  By default,
everything is compiled in the =pdf/= directory

* Requirements

- LaTeX with a recent =latexmk=
- Python3, with =numpy=, =scipy=.
- =zsh=

